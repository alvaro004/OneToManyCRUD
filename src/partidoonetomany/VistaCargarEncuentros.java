/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package partidoonetomany;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alvaro Llano
 */
public class VistaCargarEncuentros extends javax.swing.JInternalFrame {

    EntityManagerFactory emf = null;
    EntityManager em = null;
    /**
     * Creates new form VistaCargarEncuentros
     */
    public VistaCargarEncuentros() {
        initComponents();
        
        emf = null;
        em = null;
        emf = Persistence.createEntityManagerFactory("C:/base/PartidoOneToMany.odb");
        em = emf.createEntityManager();

        CargarEquipo();
        CargarArbitro();
        listarPartido();
        
        TextPrompt placeholder1 = new TextPrompt("Ingrese el Id del Encuentro", idPartidoTxt);
        TextPrompt placeholder2 = new TextPrompt("Ingrese la ronda del Encuentro", rondaPartidoTxt);
        
        actualizar.setEnabled(false);
        borrar.setEnabled(false);
    }
    
    public void CargarEquipo() {        
        try {
            Query consultaEquipos = em.createQuery("SELECT equipo1 FROM Equipo equipo1");
            List<Equipo> ResultadosEquipo = consultaEquipos.getResultList();
            for (Equipo e : ResultadosEquipo) {
                
                localBox.addItem(e);
                visitanteBox.addItem(e);
            }
        } catch (Exception e) {
            System.err.println("ERROR AL INTENTAR LISTAR LOS EQUIPOS:" + e);
        }     
    }
    
    public void CargarArbitro() {   
        try {
            Query consultaArbitro = em.createQuery("SELECT arbitro FROM Arbitro arbitro");
            List<Arbitro> ResultadosArbitro = consultaArbitro.getResultList();
            for (Arbitro a : ResultadosArbitro) {
                
                arbitroBox.addItem(a);
            }
        } catch (Exception e) {
            System.err.println("ERROR AL INTENTAR LISTAR LOS ARBITROS:" + e);
        }
    }
    
    public void listarPartido() {
        try {
            Query consultaPartido = em.createQuery("SELECT partido FROM Partido partido");
            List<Partido> ResultadosPartido = consultaPartido.getResultList();
            DefaultTableModel modelo = (DefaultTableModel) tablePartido.getModel();
            modelo.setRowCount(0);
            for (Partido p : ResultadosPartido) {
                try {
                    modelo.addRow(new Object[]{p.getIdPartido(),p.getRonda(), p.getArbitro().getNombreArbitro() ,p.getLocal().getNombreEquipo(), p.getVisitante().getNombreEquipo()});

                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);            
        }
    }
    
    public Partido getDatos(){
        String idPartido = idPartidoTxt.getText();
        String Ronda = rondaPartidoTxt.getText();
        Arbitro arbitro = (Arbitro) arbitroBox.getSelectedItem();
        Equipo equipoLocal = (Equipo) localBox.getSelectedItem();
        Equipo equipoVisitante = (Equipo) visitanteBox.getSelectedItem();        

        Partido partido = new Partido(idPartido, Ronda, equipoLocal, equipoVisitante, arbitro);
        
        return partido;
    } 
    
    public void setForm(String idEncuentro, String rondaEncuentro){
        idPartidoTxt.setText(idEncuentro);
        rondaPartidoTxt.setText(rondaEncuentro); 
        arbitroBox.setSelectedIndex(0);
        localBox.setSelectedIndex(0);
        visitanteBox.setSelectedIndex(0);
        
    }
    
    public void setFormBox(Arbitro arbitro, Equipo local, Equipo visitante){
        arbitroBox.setSelectedItem(arbitro);
        localBox.setSelectedItem(local);
        visitanteBox.setSelectedItem(visitante);
    }
    
    
    public Object getFilaTable(){
        int fila = tablePartido.getSelectedRow();
        Object id = tablePartido.getValueAt(fila, 0);
        return id;       
    }    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idPartidoTxt = new javax.swing.JTextField();
        rondaPartidoTxt = new javax.swing.JTextField();
        arbitroBox = new javax.swing.JComboBox();
        localBox = new javax.swing.JComboBox();
        visitanteBox = new javax.swing.JComboBox();
        guardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePartido = new javax.swing.JTable();
        actualizar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);

        localBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localBoxActionPerformed(evt);
            }
        });

        visitanteBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitanteBoxActionPerformed(evt);
            }
        });

        guardar.setBackground(new java.awt.Color(102, 255, 0));
        guardar.setText("Guardar");
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
        });

        tablePartido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RONDA", "ARBITRO", "EQUIPO LOCAL", "EQUIPO VISITANTE"
            }
        ));
        tablePartido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePartidoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePartido);

        actualizar.setBackground(new java.awt.Color(255, 255, 51));
        actualizar.setText("Actualizar");
        actualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualizarMouseClicked(evt);
            }
        });

        borrar.setBackground(new java.awt.Color(255, 0, 51));
        borrar.setText("Borrar");
        borrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrarMouseClicked(evt);
            }
        });

        cancelar.setBackground(new java.awt.Color(204, 204, 255));
        cancelar.setText("Cancelar");
        cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actualizar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(guardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rondaPartidoTxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idPartidoTxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visitanteBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arbitroBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(localBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idPartidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rondaPartidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(arbitroBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(localBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(visitanteBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void localBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_localBoxActionPerformed

    private void visitanteBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitanteBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_visitanteBoxActionPerformed

    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked
        try {
            Partido partido = getDatos();
            
            em.getTransaction().begin();
            em.persist(partido);
            em.getTransaction().commit();
            
            JOptionPane.showMessageDialog(rootPane, "Guardado Exitoso");    
            //VACIAMOS EL FORMULARIO    
            setForm("","");
            
            listarPartido();
         
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error al Guardar"); 
        }
    }//GEN-LAST:event_guardarMouseClicked

    private void tablePartidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePartidoMouseClicked
        try {
            idPartidoTxt.setEnabled(false);
            //SE BUSCA EL ID DE LA FILA SELECIONANDA LLAMANDO A ESTE METODO
            Object id = getFilaTable();

            Partido partido = em.find(Partido.class, id);

            //ENVIAMOS LOS DATOS DE EQUIPO AL FORM
            setForm(partido.getIdPartido(), partido.getRonda());
            setFormBox(partido.getArbitro(), partido.getLocal(), partido.getVisitante());

            guardar.setEnabled(false);
            borrar.setEnabled(true);
            actualizar.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "NO se puede seleccionar la fila");           
        }      
    }//GEN-LAST:event_tablePartidoMouseClicked

    private void actualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizarMouseClicked
        try {
            //SE BUSCA EL ID DE LA FILA SELECIONANDA LLAMANDO A ESTE METODO
            Object id = getFilaTable();
            //SE ENCUENTRA EL OBJETO DESEADO Y SE GUARDA EN EL TIPO DE DATO DEL OBJETO
            Partido partido = em.find(Partido.class, id);
            //SE TRAEN LOS DATOS DEL FORMULARIO Y SE GUARDAN EN UN OBJETO DEL MISMO TIPO
            Partido partido1 = getDatos();
            //SE ENVIAN LOS DATOS CAMBIADOS DEL OBJETO PARTIDO1 AL OBJETO PARTIDO
            partido.setRonda(partido1.getRonda());
            partido.setArbitro(partido1.getArbitro());
            partido.setLocal(partido1.getLocal());
            partido.setVisitante(partido1.getVisitante());

            em.getTransaction().begin();
            em.persist(partido);
            em.getTransaction().commit();        

            JOptionPane.showMessageDialog(rootPane, "Actualizado Exitoso");          
            listarPartido();

            //VACIAMOS EL FORM
            setForm("", "");        

            idPartidoTxt.setEnabled(true);       
            guardar.setEnabled(true);
            borrar.setEnabled(false);
            actualizar.setEnabled(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error al Actualizar: ");
        }   
    }//GEN-LAST:event_actualizarMouseClicked

    private void borrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrarMouseClicked
        try {
            Object id = getFilaTable();
            Partido partido = em.find(Partido.class, id);       
            em.getTransaction().begin();
            em.remove(partido);
            em.getTransaction().commit();

            //VACIAMOS LOS CAMPOS
            setForm("", "");        

            JOptionPane.showMessageDialog(rootPane, "Borrado Exitoso");
            idPartidoTxt.setEnabled(true);
            guardar.setEnabled(true);
            borrar.setEnabled(false);
            actualizar.setEnabled(false);
            listarPartido();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error al Borrar: ");
        }
  
    }//GEN-LAST:event_borrarMouseClicked

    private void cancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarMouseClicked
        //VACIAMOS LOS CAMPOS
        setForm("", "");
        
        idPartidoTxt.setEnabled(true);
        guardar.setEnabled(true);
        borrar.setEnabled(false);
        actualizar.setEnabled(false);
    }//GEN-LAST:event_cancelarMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JComboBox arbitroBox;
    private javax.swing.JButton borrar;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JTextField idPartidoTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox localBox;
    private javax.swing.JTextField rondaPartidoTxt;
    private javax.swing.JTable tablePartido;
    private javax.swing.JComboBox visitanteBox;
    // End of variables declaration//GEN-END:variables
}
